#!/bin/bash

# Export required paths:
export LD_LIBRARY_PATH=/usr/local/gcc-7.3.0/lib64:/usr/local/gcc-7.3.0/lib

# Make a directory for BUSTED[S] outputs:
mkdir ./9_3_BustedPHResults
mkdir ./9_3_BustedPHResults/$2

# Add HyPhy to your path:
module load gcc/7.3.0
export PATH=/programs/hyphy-20210923/bin:$PATH
cd ./9_3_BustedPHResults
git clone https://github.com/veg/hyphy-analyses.git
cd ../

export batchSize=50
export currentBatch=0
export batchFileNames=()

ls -hSr 8_2_RemovedStops > sequencefileList.txt
rm $2FileList.txt
# Read the list of files and check that a corresponding tree file DOES exist and a corresponding output file does NOT exist.
while read -r line;
do
export orthogroupNumber=`echo "$line" | awk -F'_' '{print ($2)}'`
export treeFile=$1$2"Labelled_"$orthogroupNumber"_tree.txt"
if [ -f "$treeFile" ]; then
  echo "$treeFile exists."
  FILE="./9_3_BustedPHResults/"$2"/"$2"_"$orthogroupNumber"_BUSTEDPH.fas.BUSTED.json"
  if [ -f "$FILE" ]; then
    echo "*************************************************************"
    echo "$FILE exists; BUSTED-PH has already been run on this orthogroup."
    echo "*************************************************************"
  else
    # Make sure vertical bars are replaced with underscores:
    echo This file should be added to the file list
    echo 8_2_RemovedStops/cleaned_"$orthogroupNumber"_cds.fasta >> $2FileList.txt
  fi
else
  echo "$treeFile does not exist."
fi
done < sequencefileList.txt


while read -r line;
do
  export cdsFile="$line"
  batchFileNames+=($cdsFile)
  # Get the size of the array :  ${#batchFileNames[&]}
  if [ ${#batchFileNames[@]} -eq $batchSize ]; then
    echo Starting batch
    for batchFile in ${batchFileNames[@]} ; do
      echo $batchFile
      ./scripts/SingleBustedPHRun $batchFile $1 $2 &
    done
    echo Begin wait.
    wait
    echo Done waiting.
    echo Finished batch
    batchFileNames=()
  fi
  echo __________________________________________________
done < $2FileList.txt

if [ ${#batchFileNames[@]} -gt 0 ]; then
  echo Starting batch
  for batchFile in ${batchFileNames[@]} ; do
    echo $batchFile
    ./scripts/SingleBustedRun $batchFile &
  done
fi
